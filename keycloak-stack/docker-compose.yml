# kcs = keycloak stack
# this docker-compose file is for production use keycloak with Postgres database and Vault secret management
services:
  kcs-postgres:
    image: postgres:17.5-bullseye
    container_name: kcs-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - kcs_postgres_data:/var/lib/postgresql/data
    networks:
      - rtr-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 5
  kcs-keycloak:
    image: quay.io/keycloak/keycloak:26.3.1
    container_name: kcs-keycloak
    environment:
      # Database Configuration
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://kcs-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}

      # Admin User
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_ADMIN}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

      # Production Settings
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_PORT: ${KC_HOSTNAME_PORT}
      KC_HOSTNAME_STRICT: true               # set to true if HTTPS
      KC_HOSTNAME_STRICT_HTTPS: true         # set to true if HTTPS
      KC_HOSTNAME_URL: https://${KC_HOSTNAME}:${KC_HOSTNAME_PORT}
      KC_HOSTNAME_ADMIN_URL: https://${KC_HOSTNAME}:${KC_HOSTNAME_PORT}
      KC_PROXY: edge
      KC_HTTP_ENABLED: true
      KC_HTTPS_PORT: 443
      KC_PROXY_HEADERS: xforwarded
      KC_CACHE: ispn
      KC_LOG_LEVEL: INFO
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      JAVA_OPTS_APPEND: "-Xms512m -Xmx2048m"
    command: start               # use in production mode
    #command: start-dev                        # use in development mode
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - kcs_data:/opt/keycloak/data
      - ./keycloak/themes:/opt/keycloak/themes
      - ./keycloak/conf:/opt/keycloak/conf
    networks:
      - rtr-net
    depends_on:
      kcs-postgres:
        condition: service_healthy
    restart: unless-stopped
  rtr-vault:
    image: hashicorp/vault:1.15
    container_name: vault
    restart: unless-stopped
    user: "0:0"
    environment:
      VAULT_ADDR: 'http://0.0.0.0:8200'
      VAULT_LOCAL_CONFIG: |
        {
          "storage": {
            "file": {
              "path": "/vault/data"
            }
          },
          "listener": {
            "tcp": {
              "address": "0.0.0.0:8200",
              "tls_disable": true
            }
          },
          "api_addr": "https://localhost:8200",
          "ui": true,
          "disable_mlock": true
        }
    ports:
      - "127.0.0.1:8200:8200"
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
    cap_add:
      - IPC_LOCK
    command: |
      sh -c "
        mkdir -p /vault/data /vault/logs
        chown -R vault:vault /vault/data /vault/logs
        vault server -config=/vault/config/local.json
      "
    networks:
      - rtr-net
  rtr-rabbitmq:
    image: rabbitmq:4-management
    container_name: rtr-rabbitmq
    hostname: rtr-rabbitmq
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rtr-rabbitmq-data:/var/lib/rabbitmq
      - rtr-rabbitmq-logs:/var/log/rabbitmq
    networks:
      - rtr-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
volumes:
  kcs_postgres_data:
  kcs_data:
  vault_data:
  vault_logs:
  rtr-rabbitmq-data:
  rtr-rabbitmq-logs:
networks:
  rtr-net:
    external: true